{
    "component_name": "simple_footer_component",
    "id": "simple_footer_component_1724097556",
    "type": "containerComponent",
    "metadata": {
        "markdownText": "/* Summary: This component contains a Tetris game widget in the footer. */\nVue.component(\"simple_footer_component_1724097556\", {\n    template: `\n    <footer id=\"footer-section\" class=\"flex-1 bg-white dark:bg-gray-800\">\n        <div id=\"footer-container\" class=\"max-w-screen-xl p-4 py-6 mx-auto lg:py-16 md:p-8 lg:p-10\">\n            <div id=\"footer-content\" class=\"text-center\">\n                <h2 class=\"text-2xl font-bold mb-4\">Email Santa</h2>\n                <form @submit.prevent=\"sendEmailToSanta\" class=\"w-64 mx-auto bg-gray-100 rounded-lg shadow-lg p-4\">\n                    <input v-model=\"name\" type=\"text\" placeholder=\"Your Name\" class=\"w-full mb-2 p-2 rounded\" required>\n                    <textarea v-model=\"message\" placeholder=\"Your Message to Santa\" class=\"w-full mb-2 p-2 rounded\" rows=\"4\" required></textarea>\n                    <button type=\"submit\" class=\"w-full px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\">\n                        <i class='bx bx-envelope mr-2'></i>Send to Santa\n                    </button>\n                </form>\n            </div>\n            <hr id=\"footer-divider\" class=\"my-6 border-gray-200 sm:mx-auto dark:border-gray-700 lg:my-8\">\n            <div class=\"flex\">\n                <div id=\"footer-text\" class=\"flex-1 block text-sm text-center text-gray-500 dark:text-gray-400\">\n                    \u00a9 2023 ThroneMart. Elevating your bathroom experience, one flush at a time.\n                </div>\n            </div>\n        </div>\n    </footer>\n    `,\n    data() {\n        return {\n            name: '',\n            message: '',\n        };\n    },\n    methods: {\n        sendEmailToSanta() {\n            // Send email logic here\n            console.log(`Sending email to Santa from ${this.name}: ${this.message}`);\n            alert('Your message has been sent to Santa!');\n            this.name = '';\n            this.message = '';\n        },\n        initTetris() {\n            const canvas = document.getElementById('tetris-canvas');\n            const ctx = canvas.getContext('2d');\n            const BLOCK_SIZE = 20;\n            const BOARD_WIDTH = 10;\n            const BOARD_HEIGHT = 20;\n\n            // Tetris game logic\n            this.game = {\n                board: Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0)),\n                piece: null,\n                score: 0,\n\n                start() {\n                    this.board = Array(BOARD_HEIGHT).fill().map(() => Array(BOARD_WIDTH).fill(0));\n                    this.piece = this.randomPiece();\n                    this.score = 0;\n                    this.gameLoop();\n                },\n\n                randomPiece() {\n                    const pieces = [\n                        [[1, 1, 1, 1]],\n                        [[1, 1], [1, 1]],\n                        [[1, 1, 1], [0, 1, 0]],\n                        [[1, 1, 1], [1, 0, 0]],\n                        [[1, 1, 1], [0, 0, 1]],\n                        [[1, 1, 0], [0, 1, 1]],\n                        [[0, 1, 1], [1, 1, 0]]\n                    ];\n                    return pieces[Math.floor(Math.random() * pieces.length)];\n                },\n\n                moveDown() {\n                    this.piece.y++;\n                    if (this.collision()) {\n                        this.piece.y--;\n                        this.merge();\n                        this.piece = this.randomPiece();\n                        if (this.collision()) {\n                            // Game over\n                            return false;\n                        }\n                    }\n                    return true;\n                },\n\n                moveLeft() {\n                    this.piece.x--;\n                    if (this.collision()) {\n                        this.piece.x++;\n                    }\n                },\n\n                moveRight() {\n                    this.piece.x++;\n                    if (this.collision()) {\n                        this.piece.x--;\n                    }\n                },\n\n                rotate() {\n                    const rotated = this.piece.shape[0].map((_, i) =>\n                        this.piece.shape.map(row => row[i]).reverse()\n                    );\n                    const previousShape = this.piece.shape;\n                    this.piece.shape = rotated;\n                    if (this.collision()) {\n                        this.piece.shape = previousShape;\n                    }\n                },\n\n                collision() {\n                    for (let y = 0; y < this.piece.shape.length; y++) {\n                        for (let x = 0; x < this.piece.shape[y].length; x++) {\n                            if (this.piece.shape[y][x] &&\n                                (this.board[y + this.piece.y] &&\n                                this.board[y + this.piece.y][x + this.piece.x]) !== 0) {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n                },\n\n                merge() {\n                    for (let y = 0; y < this.piece.shape.length; y++) {\n                        for (let x = 0; x < this.piece.shape[y].length; x++) {\n                            if (this.piece.shape[y][x]) {\n                                this.board[y + this.piece.y][x + this.piece.x] = 1;\n                            }\n                        }\n                    }\n                    this.clearLines();\n                },\n\n                clearLines() {\n                    for (let y = this.board.length - 1; y >= 0; y--) {\n                        if (this.board[y].every(value => value !== 0)) {\n                            this.board.splice(y, 1);\n                            this.board.unshift(Array(BOARD_WIDTH).fill(0));\n                            this.score += 100;\n                        }\n                    }\n                },\n\n                draw() {\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    this.drawBoard();\n                    this.drawPiece();\n                },\n\n                drawBoard() {\n                    for (let y = 0; y < this.board.length; y++) {\n                        for (let x = 0; x < this.board[y].length; x++) {\n                            if (this.board[y][x]) {\n                                ctx.fillStyle = 'blue';\n                                ctx.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n                                ctx.strokeStyle = 'white';\n                                ctx.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n                            }\n                        }\n                    }\n                },\n\n                drawPiece() {\n                    for (let y = 0; y < this.piece.shape.length; y++) {\n                        for (let x = 0; x < this.piece.shape[y].length; x++) {\n                            if (this.piece.shape[y][x]) {\n                                ctx.fillStyle = 'red';\n                                ctx.fillRect((this.piece.x + x) * BLOCK_SIZE, (this.piece.y + y) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n                                ctx.strokeStyle = 'white';\n                                ctx.strokeRect((this.piece.x + x) * BLOCK_SIZE, (this.piece.y + y) * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);\n                            }\n                        }\n                    }\n                },\n\n                gameLoop() {\n                    this.draw();\n                    if (this.moveDown()) {\n                        setTimeout(() => this.gameLoop(), 500);\n                    } else {\n                        alert('Game Over! Score: ' + this.score);\n                    }\n                }\n            };\n\n            document.addEventListener('keydown', event => {\n                if (!this.game.piece) return;\n                if (event.key === 'ArrowLeft') this.game.moveLeft();\n                if (event.key === 'ArrowRight') this.game.moveRight();\n                if (event.key === 'ArrowDown') this.game.moveDown();\n                if (event.key === 'ArrowUp') this.game.rotate();\n                this.game.draw();\n            });\n        }\n    },\n    mounted() {\n        this.$nextTick(() => {\n            this.initTetris();\n        });\n    }\n});\n"
    },
    "w": 12,
    "h": 8,
    "x": 0,
    "y": 8,
    "i": "1",
    "minW": 3,
    "maxW": 12,
    "minH": 1,
    "moved": false,
    "static": false,
    "isDraggable": true,
    "isResizable": true,
    "name": ""
}